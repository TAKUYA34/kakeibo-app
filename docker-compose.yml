services:
  mongo:
    image: mongo:latest
    restart: always
    volumes:
      - mongo_data:/data/db
    networks:
      - my_network

  backend:
    # build: ./backend # 本番用
    build:
      context: ./backend
      dockerfile: Dockerfile.dev  # 開発用
    container_name: kakeibo-backend
    restart: always
    # expose:
    #   - "5001"  # nginxからアクセスするためにはexposeでOK 本番用
    ports:
      - "5001:5001"  # 開発用
    volumes:
      - ./backend:/app  # 開発用
      - /app/node_modules  # ホストのnode_modulesを上書きしない
    networks:
      - my_network
    environment:
      # - NODE_ENV=production # 本番用
      - NODE_ENV=development
      - PORT=5001
      # - MONGO_URI=mongodb://mongo:27017/production_db # 本番用
      - MONGO_URI=mongodb://mongo:27017/my_database
      # - JWT_SECRET=${REACT_JWT_SECRET} # 本番用

  frontend:
    build:
      context: ./frontend # 本番用ならcontext: のみ削除
      dockerfile: Dockerfile.dev  # 開発用
    container_name: kakeibo-frontend
    restart: always
    ports:
      - "3000:3000"  # 開発用
    depends_on:
      - backend
    volumes:
      - ./frontend:/app  # 開発用
      - /app/node_modules  # ホストのnode_modulesを上書きしない
    networks:
      - my_network

  nginx:
    build:
      context: ./nginx
    container_name: kakeibo-nginx
    restart: always
    ports:
      - "80:80"
      # - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/dev.conf:/etc/nginx/conf.d/default.conf # 開発用の設定ファイル
      # - ./certbot/www:/var/www/certbot
      # - ./certbot/conf:/etc/letsencrypt # SSL証明書発行
    networks:
      - my_network

  # certbot:
  #   image: certbot/certbot
  #   container_name: kakeibo-certbot
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   entrypoint: ""  # entrypoint を空にするのは対話実行を可能にするため

volumes:
  mongo_data:

networks:
  my_network:
    driver: bridge